{"ast":null,"code":"var _jsxFileName = \"/Users/s.kitagawa/Desktop/react-guide-material/07_styling_component/src/040_css_in_js/end/Example.js\",\n  _s = $RefreshSig$();\n/* POINT css-in-js（styled-components） */\n\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// POINT 拡張機能 styled-components.vscode-styled-components\n\n/* POINT 生成する要素を指定し、スタイルをテンプレートリテラルで記述します */\n// React要素扱いなので変数名は大文字で記述！\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled.button`\n  margin-inline: auto;\n  border-radius: 9999px;\n  border: none;\n  display: block;\n  width: 120px;\n  height: 60px;\n  margin: 10px auto;\n  font-weight: bold;\n  cursor: pointer;\n  text-align: center;\n  line-height: 60px;\n  /* POINT valueを関数にすることで、引数にpropsを受け取ることができる。\n  { isSelected } の部分を変更することで受け取る名前を変更することができる。\n   */\n  background-color: ${_ref => {\n  let {\n    isSelected\n  } = _ref;\n  return isSelected ? \"pink\" : \"darkcyan\";\n}};\n  transition: all 0.3s ease-out;\n\n  /* POINT 疑似クラスの追加 */\n  :hover,\n  :active {\n    opacity: 0.7;\n    transform: scale(1.1);\n  }\n  span {\n    color: purple;\n  }\n  /* POINT メディアクエリ */\n  @media (max-width: 600px) {\n    border-radius: 0;\n  }\n\n  :global {\n    background-color: black;\n  }\n`;\n\n// POINT スタイルの継承。styled()でラップする\n_c = StyledButton;\nconst StyledSubButton = styled(StyledButton)`\n  background-color: ${_ref2 => {\n  let {\n    isSelectedSub\n  } = _ref2;\n  return isSelectedSub ? \"crimson\" : \"coral\";\n}};\n`;\n_c2 = StyledSubButton;\nconst StyledOliveButton = styled(StyledButton)`\n  background-color: olive;\n`;\n_c3 = StyledOliveButton;\nconst Example = () => {\n  _s();\n  const [isSelected, setIsSelected] = useState(false);\n  const [isSelectedSub, setIsSelectedSub] = useState(false);\n  const onClickHandler = () => setIsSelected(!isSelected);\n  const onClickSubHandler = () => setIsSelectedSub(!isSelectedSub);\n\n  /* POINT css-in-jsのメリットとデメリット\n  メリット\n    スタイルをコンポーネントで定義するので、外部のcssに依存することなくコンポーネント単体で動作する\n    JavaScriptで記述するため、JSの文法が使用出来たり、propsとして値を渡すこともできる\n    ユニークなクラス名が自動生成され他のコンポーネントに影響を与えないことが保証される\n    cssの設計が必要なくなる\n    コンポーネントで完結しているため、他のプロジェクトで再利用がしやすい\n  デメリット\n    自動生成されるユニークなクラス名が読めない\n    cssに比べパフォーマンスに劣る\n    ※ 些細な差なのでデメリットというほどでも無い\n    ※ どうしても気になる方は、Nextjsを使用することでパフォーマンスの面は気にしなくてよくなります。\n  */\n\n  return (\n    /*#__PURE__*/\n    // 属性にある isSelected は 上記で定義されています。\n    // background-color: ${({ isSelected }) => ~~~ };\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n        isSelected: isSelected,\n        onClick: onClickHandler,\n        children: \"\\u30DC\\u30BF\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StyledSubButton, {\n        isSelectedSub: isSelectedSub,\n        onClick: onClickSubHandler,\n        children: \"\\u30B5\\u30D6\\u30DC\\u30BF\\u30F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(StyledOliveButton, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u30AA\\u30EA\\u30FC\\u30D6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n};\n_s(Example, \"hRC6LDqL6wnTY3LdR57EGcl7RBc=\");\n_c4 = Example;\nexport default Example;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"StyledSubButton\");\n$RefreshReg$(_c3, \"StyledOliveButton\");\n$RefreshReg$(_c4, \"Example\");","map":{"version":3,"names":["useState","styled","StyledButton","button","isSelected","StyledSubButton","isSelectedSub","StyledOliveButton","Example","setIsSelected","setIsSelectedSub","onClickHandler","onClickSubHandler"],"sources":["/Users/s.kitagawa/Desktop/react-guide-material/07_styling_component/src/040_css_in_js/end/Example.js"],"sourcesContent":["/* POINT css-in-js（styled-components） */\n\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// POINT 拡張機能 styled-components.vscode-styled-components\n\n/* POINT 生成する要素を指定し、スタイルをテンプレートリテラルで記述します */\n// React要素扱いなので変数名は大文字で記述！\nconst StyledButton = styled.button`\n  margin-inline: auto;\n  border-radius: 9999px;\n  border: none;\n  display: block;\n  width: 120px;\n  height: 60px;\n  margin: 10px auto;\n  font-weight: bold;\n  cursor: pointer;\n  text-align: center;\n  line-height: 60px;\n  /* POINT valueを関数にすることで、引数にpropsを受け取ることができる。\n  { isSelected } の部分を変更することで受け取る名前を変更することができる。\n   */\n  background-color: ${({ isSelected }) => (isSelected ? \"pink\" : \"darkcyan\")};\n  transition: all 0.3s ease-out;\n\n  /* POINT 疑似クラスの追加 */\n  :hover,\n  :active {\n    opacity: 0.7;\n    transform: scale(1.1);\n  }\n  span {\n    color: purple;\n  }\n  /* POINT メディアクエリ */\n  @media (max-width: 600px) {\n    border-radius: 0;\n  }\n\n  :global {\n    background-color: black;\n  }\n`;\n\n// POINT スタイルの継承。styled()でラップする\nconst StyledSubButton = styled(StyledButton)`\n  background-color: ${({ isSelectedSub }) =>\n    isSelectedSub ? \"crimson\" : \"coral\"};\n`;\n\nconst StyledOliveButton = styled(StyledButton)`\n  background-color: olive;\n`;\n\nconst Example = () => {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isSelectedSub, setIsSelectedSub] = useState(false);\n\n  const onClickHandler = () => setIsSelected(!isSelected);\n  const onClickSubHandler = () => setIsSelectedSub(!isSelectedSub);\n\n  /* POINT css-in-jsのメリットとデメリット\n  メリット\n    スタイルをコンポーネントで定義するので、外部のcssに依存することなくコンポーネント単体で動作する\n    JavaScriptで記述するため、JSの文法が使用出来たり、propsとして値を渡すこともできる\n    ユニークなクラス名が自動生成され他のコンポーネントに影響を与えないことが保証される\n    cssの設計が必要なくなる\n    コンポーネントで完結しているため、他のプロジェクトで再利用がしやすい\n  デメリット\n    自動生成されるユニークなクラス名が読めない\n    cssに比べパフォーマンスに劣る\n    ※ 些細な差なのでデメリットというほどでも無い\n    ※ どうしても気になる方は、Nextjsを使用することでパフォーマンスの面は気にしなくてよくなります。\n  */\n\n  return (\n    // 属性にある isSelected は 上記で定義されています。\n    // background-color: ${({ isSelected }) => ~~~ };\n    <>\n      <StyledButton isSelected={isSelected} onClick={onClickHandler}>\n        ボタン\n      </StyledButton>\n      <StyledSubButton\n        isSelectedSub={isSelectedSub}\n        onClick={onClickSubHandler}\n      >\n        サブボタン\n      </StyledSubButton>\n      <StyledOliveButton><span>オリーブ</span></StyledOliveButton>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,mBAAmB;;AAEtC;;AAEA;AACA;AAAA;AAAA;AACA,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;EAAA,IAAC;IAAEC;EAAW,CAAC;EAAA,OAAMA,UAAU,GAAG,MAAM,GAAG,UAAU;AAAA,CAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAA,KArCMF,YAAY;AAsClB,MAAMG,eAAe,GAAGJ,MAAM,CAACC,YAAY,CAAE;AAC7C,sBAAsB;EAAA,IAAC;IAAEI;EAAc,CAAC;EAAA,OACpCA,aAAa,GAAG,SAAS,GAAG,OAAO;AAAA,CAAC;AACxC,CAAC;AAAC,MAHID,eAAe;AAKrB,MAAME,iBAAiB,GAAGN,MAAM,CAACC,YAAY,CAAE;AAC/C;AACA,CAAC;AAAC,MAFIK,iBAAiB;AAIvB,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACJ,UAAU,EAAEK,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACM,aAAa,EAAEI,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMW,cAAc,GAAG,MAAMF,aAAa,CAAC,CAACL,UAAU,CAAC;EACvD,MAAMQ,iBAAiB,GAAG,MAAMF,gBAAgB,CAAC,CAACJ,aAAa,CAAC;;EAEhE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;IAAA;IACE;IACA;IACA;MAAA,wBACE,QAAC,YAAY;QAAC,UAAU,EAAEF,UAAW;QAAC,OAAO,EAAEO,cAAe;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAE/C,eACf,QAAC,eAAe;QACd,aAAa,EAAEL,aAAc;QAC7B,OAAO,EAAEM,iBAAkB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGX,eAClB,QAAC,iBAAiB;QAAA,uBAAC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAoB;IAAA;EACvD;AAEP,CAAC;AAAC,GArCIJ,OAAO;AAAA,MAAPA,OAAO;AAuCb,eAAeA,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}