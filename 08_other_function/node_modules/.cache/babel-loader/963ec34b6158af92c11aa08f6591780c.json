{"ast":null,"code":"var _jsxFileName = \"/Users/s.kitagawa/Desktop/react-guide-material/08_other_function/src/030_useRef/end/Example.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useRef } from 'react';\n\n/* POINT useRefでDOMを取得\nrefオブジェクトをref属性に渡すとDOMを参照することができます。\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Case1 = () => {\n  _s();\n  const [value, setValue] = useState('');\n  const inputRef = useRef();\n\n  // console.log(inputRef);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B91\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      value: value,\n      onChange: e => setValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => inputRef.current.focus(),\n      children: \"\\u30A4\\u30F3\\u30D7\\u30C3\\u30C8\\u8981\\u7D20\\u3092\\u30D5\\u30A9\\u30FC\\u30AB\\u30B9\\u3059\\u308B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n// POINT 動画の再生・停止を制御\n_s(Case1, \"hFRrsaDpQQySf+bs97CvaaOWJIQ=\");\n_c = Case1;\nconst Case2 = () => {\n  _s2();\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B92\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      style: {\n        maxWidth: '100%'\n      },\n      ref: videoRef,\n      children: /*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"./sample.mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (playing) {\n          videoRef.current.pause();\n        } else {\n          videoRef.current.play();\n        }\n        setPlaying(prev => !prev);\n      },\n      children: playing ? 'Stop' : 'Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s2(Case2, \"+KbWBPCf0bUczd5+j2BtpYMF674=\");\n_c2 = Case2;\nconst createTimeStamp = () => new Date().getTime();\n\n/* POINT useRefは再レンダリングされません。\n書き換え可能な情報としてコンポーネントに保持させておくことができます。\nstate は更新されるごとに再レンダーされますが、refオブジェクトの中身が変わっても再レンダーが走ることはありません。\n*/\nconst Case3 = () => {\n  _s3();\n  const [timeStamp, setValue] = useState(createTimeStamp());\n  const ref = useRef(createTimeStamp());\n  const updateState = () => {\n    setValue(createTimeStamp());\n  };\n  const updateRef = () => {\n    /* コンソールを見るとブラウザの表示と、ref.currentの中身が異なることを確認できます */\n    ref.current = createTimeStamp();\n    console.log('ref.current -> ', ref.current);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u30E6\\u30FC\\u30B9\\u30B1\\u30FC\\u30B93\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"state: \", timeStamp, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateState,\n        children: \"\\u66F4\\u65B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ref: \", ref.current, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: updateRef,\n        children: \"\\u66F4\\u65B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n/* POINT refを使うべきタイミング\nReactは一般的に、propsを通して親から子へ作用させる、というデータフローが原則です。\nrefを使ってコンポーネントに作用を起こすことは、その原則を崩す行為なので多用は避けましょう。\n\nrefに適した使用例は以下の場合とされています。\n- フォームへのフォーカス、テキストの選択、メディア（動画・音声）の再生の管理\n- アニメーションの発火\n- サードパーティの DOM や、React管理外のDOMの埋め込み\n*/\n_s3(Case3, \"05QoAIf8fZod5WRr+igOAGdl5cY=\");\n_c3 = Case3;\nconst Example = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Case1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Case2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Case3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c4 = Example;\nexport default Example;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Case1\");\n$RefreshReg$(_c2, \"Case2\");\n$RefreshReg$(_c3, \"Case3\");\n$RefreshReg$(_c4, \"Example\");","map":{"version":3,"names":["useState","useRef","Case1","value","setValue","inputRef","e","target","current","focus","Case2","playing","setPlaying","videoRef","maxWidth","pause","play","prev","createTimeStamp","Date","getTime","Case3","timeStamp","ref","updateState","updateRef","console","log","Example"],"sources":["/Users/s.kitagawa/Desktop/react-guide-material/08_other_function/src/030_useRef/end/Example.js"],"sourcesContent":["import { useState, useRef } from 'react';\n\n/* POINT useRefでDOMを取得\nrefオブジェクトをref属性に渡すとDOMを参照することができます。\n*/\nconst Case1 = () => {\n  const [value, setValue] = useState('');\n  const inputRef = useRef();\n\n  // console.log(inputRef);\n\n  return (\n    <div>\n      <h3>ユースケース1</h3>\n      <input\n        type=\"text\"\n        ref={inputRef}\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <button onClick={() => inputRef.current.focus()}>\n        インプット要素をフォーカスする\n      </button>\n    </div>\n  );\n};\n\n// POINT 動画の再生・停止を制御\nconst Case2 = () => {\n  const [playing, setPlaying] = useState(false);\n  const videoRef = useRef();\n\n  return (\n    <div>\n      <h3>ユースケース2</h3>\n      <video style={{ maxWidth: '100%' }} ref={videoRef}>\n        <source src=\"./sample.mp4\"></source>\n      </video>\n      <button\n        onClick={() => {\n          if (playing) {\n            videoRef.current.pause();\n          } else {\n            videoRef.current.play();\n          }\n\n          setPlaying((prev) => !prev);\n        }}\n      >\n        {playing ? 'Stop' : 'Play'}\n      </button>\n    </div>\n  );\n};\n\nconst createTimeStamp = () => new Date().getTime();\n\n/* POINT useRefは再レンダリングされません。\n書き換え可能な情報としてコンポーネントに保持させておくことができます。\nstate は更新されるごとに再レンダーされますが、refオブジェクトの中身が変わっても再レンダーが走ることはありません。\n*/\nconst Case3 = () => {\n  const [timeStamp, setValue] = useState(createTimeStamp());\n  const ref = useRef(createTimeStamp());\n\n  const updateState = () => {\n    setValue(createTimeStamp());\n  };\n\n  const updateRef = () => {\n    /* コンソールを見るとブラウザの表示と、ref.currentの中身が異なることを確認できます */\n    ref.current = createTimeStamp();\n    console.log('ref.current -> ', ref.current);\n  };\n  return (\n    <div>\n      <h3>ユースケース3</h3>\n      <p>\n        state: {timeStamp}\n        <button onClick={updateState}>更新</button>\n      </p>\n      <p>\n        ref: {ref.current}\n        <button onClick={updateRef}>更新</button>\n      </p>\n    </div>\n  );\n};\n\n/* POINT refを使うべきタイミング\nReactは一般的に、propsを通して親から子へ作用させる、というデータフローが原則です。\nrefを使ってコンポーネントに作用を起こすことは、その原則を崩す行為なので多用は避けましょう。\n\nrefに適した使用例は以下の場合とされています。\n- フォームへのフォーカス、テキストの選択、メディア（動画・音声）の再生の管理\n- アニメーションの発火\n- サードパーティの DOM や、React管理外のDOMの埋め込み\n*/\nconst Example = () => {\n  return (\n    <>\n      <Case1 />\n      <Case2 />\n      <Case3 />\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}