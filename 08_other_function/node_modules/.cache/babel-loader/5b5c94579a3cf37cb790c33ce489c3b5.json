{"ast":null,"code":"var _jsxFileName = \"/Users/s.kitagawa/Desktop/react-guide-material/08_other_function/src/010_portals/start/Example.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport Modal from './components/Modal';\n\n/* POINT createPortalの使い方\n第一引数: React の子要素としてレンダー可能なもの （要素、文字列、フラグメント、コンポーネントなど）\n第二引数: レンダー先のDOM要素\n*/\n\n/* POINT createPortalはどんなときに使うか？\n子要素は親要素のスタイルによって表示に制限を受ける場合があります。\n（overflow: hidden 、 z-index 、 width　など・・・ ）\nそれらの制限なく、子要素が親要素を「飛び出して」表示する必要があるときにcreatePortalを使うのが有効です。\nモーダル、ポップアップ、トーストは使用の代表例です。\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ModalPortal = _ref => {\n  let {\n    children\n  } = _ref;\n  const target = document.querySelector('.container.start');\n  return /*#__PURE__*/createPortal(children, target);\n};\n_c = ModalPortal;\nconst Example = () => {\n  _s();\n  const [modalOpen, setModalOpen] = useState(false);\n  const ref = useRef(null);\n  return (\n    /*#__PURE__*/\n    // <div onClick={() => console.log('空のdiv')}>\n    //   <div\n    //     className=\"container start\"\n    //     onClick={() => console.log('container')}\n    //   ></div>\n    //   <button\n    //     type=\"button\"\n    //     onClick={() => setModalOpen(true)}\n    //     disabled={modalOpen}\n    //   >\n    //     モーダルを表示する\n    //   </button>\n    //   {modalOpen && (\n    //     <ModalPortal>\n    //       <Modal handleCloseClick={() => setModalOpen(false)} />\n    //     </ModalPortal>\n    //   )}\n    // </div>\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://example.com\",\n        children: \"https://example.com/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"open\",\n        type: \"button\",\n        children: \"open dialog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"dialog\", {\n        open: true,\n        children: [\"dialog text\", /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"close\",\n          type: \"button\",\n          children: \"close dialog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n};\n_s(Example, \"aBGJqHVPSqfK3NAfS28l8vvB9i4=\");\n_c2 = Example;\nexport default Example;\nvar _c, _c2;\n$RefreshReg$(_c, \"ModalPortal\");\n$RefreshReg$(_c2, \"Example\");","map":{"version":3,"names":["React","useState","useRef","useEffect","createPortal","Modal","ModalPortal","children","target","document","querySelector","Example","modalOpen","setModalOpen","ref"],"sources":["/Users/s.kitagawa/Desktop/react-guide-material/08_other_function/src/010_portals/start/Example.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport Modal from './components/Modal';\n\n/* POINT createPortalの使い方\n第一引数: React の子要素としてレンダー可能なもの （要素、文字列、フラグメント、コンポーネントなど）\n第二引数: レンダー先のDOM要素\n*/\n\n/* POINT createPortalはどんなときに使うか？\n子要素は親要素のスタイルによって表示に制限を受ける場合があります。\n（overflow: hidden 、 z-index 、 width　など・・・ ）\nそれらの制限なく、子要素が親要素を「飛び出して」表示する必要があるときにcreatePortalを使うのが有効です。\nモーダル、ポップアップ、トーストは使用の代表例です。\n*/\n\nconst ModalPortal = ({ children }) => {\n  const target = document.querySelector('.container.start');\n  return createPortal(children, target);\n};\n\nconst Example = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const ref = useRef(null);\n  return (\n    // <div onClick={() => console.log('空のdiv')}>\n    //   <div\n    //     className=\"container start\"\n    //     onClick={() => console.log('container')}\n    //   ></div>\n\n    //   <button\n    //     type=\"button\"\n    //     onClick={() => setModalOpen(true)}\n    //     disabled={modalOpen}\n    //   >\n    //     モーダルを表示する\n    //   </button>\n    //   {modalOpen && (\n    //     <ModalPortal>\n    //       <Modal handleCloseClick={() => setModalOpen(false)} />\n    //     </ModalPortal>\n    //   )}\n    // </div>\n    <>\n      <a href=\"https://example.com\">https://example.com/</a>\n      <br />\n      <button id=\"open\" type=\"button\">\n        open dialog\n      </button>\n      <dialog open>\n        dialog text\n        <button id=\"close\" type=\"button\">\n          close dialog\n        </button>\n      </dialog>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,YAAY,QAAQ,WAAW;AACxC,OAAOC,KAAK,MAAM,oBAAoB;;AAEtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAOA,MAAMC,WAAW,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC/B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;EACzD,oBAAON,YAAY,CAACG,QAAQ,EAAEC,MAAM,CAAC;AACvC,CAAC;AAAC,KAHIF,WAAW;AAKjB,MAAMK,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMa,GAAG,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACxB;IAAA;IACE;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MAAA,wBACE;QAAG,IAAI,EAAC,qBAAqB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB,eACtD;QAAA;QAAA;QAAA;MAAA,QAAM,eACN;QAAQ,EAAE,EAAC,MAAM;QAAC,IAAI,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAEtB,eACT;QAAQ,IAAI;QAAA,uCAEV;UAAQ,EAAE,EAAC,OAAO;UAAC,IAAI,EAAC,QAAQ;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEvB;MAAA;QAAA;QAAA;QAAA;MAAA,QACF;IAAA;EACR;AAEP,CAAC;AAAC,GAtCIS,OAAO;AAAA,MAAPA,OAAO;AAwCb,eAAeA,OAAO;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}