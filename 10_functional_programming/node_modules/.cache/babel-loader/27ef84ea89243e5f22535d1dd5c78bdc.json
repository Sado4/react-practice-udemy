{"ast":null,"code":"var _jsxFileName = \"/Users/s.kitagawa/Desktop/react-guide-material/10_functional_programming/src/060_react_immutability/end/Example.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n// POINT ReactでのImmutability\n// 関数型（純粋関数）\n// ・fn(決まった引数) -> 決まった戻り値\n// ・関数外の状態（データ）は参照・変更しない。\n// ・関数外に影響を及ぼさない。\n// ・引数で渡された値を変更しない。（★Immutability）\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Child = _ref => {\n  let {\n    state,\n    setState\n  } = _ref;\n  // setState({ value: 1 })\n  // props.state = { value: 1 }\n  const increment = () => {\n    setState(prev => {\n      const newState = {\n        value: prev.value + 1\n      };\n      // prev.value += 1;\n      return newState;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: state.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Child;\nconst Example = () => {\n  _s();\n  const [state, setState] = useState({\n    value: 0\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Child, {\n        state: state,\n        setState: setState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Example, \"ZWqqEt0iCohS4uYZeKd75C+qQN4=\");\n_c2 = Example;\nexport default Example;\nvar _c, _c2;\n$RefreshReg$(_c, \"Child\");\n$RefreshReg$(_c2, \"Example\");","map":{"version":3,"names":["useState","Child","state","setState","increment","prev","newState","value","Example"],"sources":["/Users/s.kitagawa/Desktop/react-guide-material/10_functional_programming/src/060_react_immutability/end/Example.js"],"sourcesContent":["import { useState } from \"react\";\n\n  // POINT ReactでのImmutability\n  // 関数型（純粋関数）\n  // ・fn(決まった引数) -> 決まった戻り値\n  // ・関数外の状態（データ）は参照・変更しない。\n  // ・関数外に影響を及ぼさない。\n  // ・引数で渡された値を変更しない。（★Immutability）\nconst Child = ({ state, setState }) => {\n  // setState({ value: 1 })\n  // props.state = { value: 1 }\n  const increment = () => {\n    setState(prev => {\n      const newState = { value: prev.value + 1 }\n      // prev.value += 1;\n      return newState;\n    })\n  }\n  return (\n    <>\n      <span>{state.value}</span>\n      <button onClick={increment}>+</button>\n    </>\n  );\n};\n\nconst Example = () => {\n  const [ state, setState ] = useState({ value: 0 });\n\n  return (\n    <>\n      <div>\n        <Child state={state} setState={setState} />\n      </div>\n    </>\n  );\n};\n\nexport default Example;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACF,MAAMC,KAAK,GAAG,QAAyB;EAAA,IAAxB;IAAEC,KAAK;IAAEC;EAAS,CAAC;EAChC;EACA;EACA,MAAMC,SAAS,GAAG,MAAM;IACtBD,QAAQ,CAACE,IAAI,IAAI;MACf,MAAMC,QAAQ,GAAG;QAAEC,KAAK,EAAEF,IAAI,CAACE,KAAK,GAAG;MAAE,CAAC;MAC1C;MACA,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;EACD,oBACE;IAAA,wBACE;MAAA,UAAOJ,KAAK,CAACK;IAAK;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC1B;MAAQ,OAAO,EAAEH,SAAU;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW;EAAA,gBACrC;AAEP,CAAC;AAAC,KAhBIH,KAAK;AAkBX,MAAMO,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAAEN,KAAK,EAAEC,QAAQ,CAAE,GAAGH,QAAQ,CAAC;IAAEO,KAAK,EAAE;EAAE,CAAC,CAAC;EAElD,oBACE;IAAA,uBACE;MAAA,uBACE,QAAC,KAAK;QAAC,KAAK,EAAEL,KAAM;QAAC,QAAQ,EAAEC;MAAS;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACvC,iBACL;AAEP,CAAC;AAAC,GAVIK,OAAO;AAAA,MAAPA,OAAO;AAYb,eAAeA,OAAO;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}